!function(){"use strict";var t=angular.module("chatApp",["ngRoute","ngSanitize"]);t.config(["$routeProvider","$locationProvider",function(t,r){t.when("/login",{templateUrl:"/views/login.html",controller:"AuthController",auth:!1}).when("/chat",{templateUrl:"/views/chat.html",controller:"ChatController",auth:!0}).when("/history",{templateUrl:"/views/chatHistory.html",controller:"ChatHistoryController",auth:!0}).when("/register",{templateUrl:"/views/register.html",controller:"RegisterController",auth:!1}).otherwise({redirectTo:"/login"})}]),t.run(["$location","$rootScope","AuthService",function(t,r,e){r.$watch("currentUser",function(o){r.currentUser||"/login"==t.path()||"/register"==t.path()||e.getCurrentUser()}),r.$on("$locationChangeStart",function(t,o,n){var l=o.auth;l&&!r.currentUser&&e.getCurrentUser()})}])}();
angular.module("chatApp").controller("ApplicationController",["$scope","$rootScope","$location","AuthService",function(t,r,e,n){"use strict";r.currentUser=n.getCurrentUser(),t.setCurrentUser=function(t){r.currentUser=t},t.logout=function(){n.logout().then(function(){}),r.currentUser=null,e.path("/login")}}]);
angular.module("chatApp").controller("AuthController",["$scope","$location","AuthService",function(r,t,e){"use strict";r.credentials={email:"",password:""},r.formregister={error:!1},r.authenticate=function(o){e.login(o).then(function(e){r.setCurrentUser(e),t.path("/chat")},function(){r.formregister.error=!0})}}]);
angular.module("chatApp").controller("ChatController",["$scope","$window","$sce","SocketService",function(o,e,s,n){"use strict";function t(e){var s;"/"==e.charAt(0)?(s=m(e),s&&o.messages.push(s)):(r(o.room,e),o.messages.push("Me: "+e)),o.inputMessage=""}function r(o,e){var s={room:o,text:e};n.emit("message",s)}function a(o){n.emit("join",{newRoom:o})}function m(o){var e=o.split(" ");o=e[0].substring(1,e[0].length).toLowerCase();var s=!1;switch(o){case"join":e.shift();var t=e.join(" ");a(t);break;case"nick":e.shift();var r=e.join(" ");n.emit("nameAttempt",r);break;default:s="Unrecognized command."}return s}o.messages=[],o.roomList=[],o.room="Lobby",o.inputMessage="",o.newRoom="",o.newRoomError=!1,n.on("nameResult",function(e){var s;s=e.success?"You are now known as "+e.name+".":e.message,o.messages.push(s)}),n.on("joinResult",function(e){o.room=e.room,o.messages=[],o.messages.push("You are now in the room "+e.room)}),n.on("message",function(e){o.messages.push(e.text)}),n.on("rooms",function(e){o.roomList=[];for(var s in e)s=s.substring(1,s.length),""!==s&&o.roomList.push(s)}),setInterval(function(){n.emit("rooms")},1e3),o.submit=function(o){t(o)},o.focusChatroom=function(e){m("/join "+e),o.messages=[],o.messages.push("Room changed.")},o.createNewChatroom=function(e){e?(t("/join "+e),$("#myModal").modal("hide"),o.newRoomError=!1):o.newRoomError=!0},o.sanitizeHtml=function(o){return s.trustAsHtml(o)}}]);
angular.module("chatApp").controller("ChatHistoryController",["$scope","$http","$location",function(o,t,c){"use strict";function s(c){t.get("/api/history/"+c).success(function(t){o.chatRoomName=c,o.chatLines=t})}o.chatRoomName="Lobby",t.get("/api/chatroom").success(function(t){o.chatRooms=t}),t.get("/api/history/Lobby").success(function(o){s("Lobby")}),o.reloadHistory=function(o){s(o)}}]);
angular.module("chatApp").controller("RegisterController",["$scope","$http","$location",function(r,e,o){"use strict";r.user={email:"",username:"",password:""},r.formregister={error:!1},r.register=function(t){e.post("/users",{user:t},{headers:{"Content-Type":"application/json; charset=UTF-8"}}).success(function(){o.path("/")}).error(function(){r.formregister.error=!0})}}]);
angular.module("chatApp").factory("AuthService",["$http","$window",function(t,r){"use strict";var e={};return e.login=function(e){return t.post("/auth",e,{headers:{"Content-Type":"application/json; charset=UTF-8"}}).then(function(t){return r.localStorage.currentUser=JSON.stringify(t.data),t.data})},e.logout=function(){return r.localStorage.currentUser?(r.localStorage.currentUser=null,t["delete"]("/auth")):void 0},e.getCurrentUser=function(){return r.localStorage.currentUser?JSON.parse(r.localStorage.currentUser):t.get("/auth").then(function(t){return r.localStorage.currentUser=JSON.stringify(t.data),t.data})},e}]);
angular.module("chatApp").factory("SocketService",["$rootScope",function(n){"use strict";var t={},o=io.connect();return t.on=function(t,c){o.on(t,function(){var t=arguments;n.$apply(function(){c.apply(o,t)})})},t.emit=function(t,c,a){o.emit(t,c,function(){var t=arguments;n.$apply(function(){a&&a.apply(o,t)})})},t}]);
//# sourceMappingURL=data:application/json;base64,