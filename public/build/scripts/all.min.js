!function(){"use strict";var t=angular.module("chatApp",["ngRoute","ngSanitize"]);t.constant("ApiBaseUrl","http://localhost:3000/api"),t.config(["$routeProvider","$locationProvider","$httpProvider",function(t,e,o){o.interceptors.push("AuthInterceptor"),t.when("/login",{templateUrl:"/views/login.html",controller:"AuthController",auth:!1}).when("/chat",{templateUrl:"/views/chat.html",controller:"ChatController",auth:!0}).when("/history",{templateUrl:"/views/chatHistory.html",controller:"ChatHistoryController",auth:!0}).when("/register",{templateUrl:"/views/register.html",controller:"RegisterController",auth:!1}).otherwise({redirectTo:"/login"})}]),t.run(["$route","$rootScope","$location","AuthService",function(t,e,o,r){e.$on("$locationChangeStart",function(e,l,n){var i=o.path(),h=t.routes[i];h&&h.auth&&!r.isAuthed()&&o.path("/login")})}])}();
angular.module("chatApp").controller("ApplicationController",["$scope","$window","$location","AuthService",function(e,t,r,n){"use strict";e.setCurrentUser=function(e,r,n){var o={_id:e,username:n,email:r};t.localStorage.setItem("currentUser",JSON.stringify(o))},e.getCurrentUser=function(){return JSON.parse(t.localStorage.getItem("currentUser"))},e.isAuthed=function(){return null!==n.isAuthed()&&n.isAuthed()!==!1},e.logout=function(){n.logout(),t.localStorage.removeItem("currentUser"),r.path("/login")}}]);
angular.module("chatApp").controller("AuthController",["$scope","$location","AuthService",function(e,r,t){"use strict";e.credentials={email:"",password:""},e.errorMessage="",e.authenticate=function(a){t.login(a).then(function(a,n,s,o){var u=t.parseToken(a.data.token);e.setCurrentUser(u.user._id,u.user.email,u.user.username),r.path("/chat")},function(r,t,a,n){e.errorMessage=r.data.message})}}]);
angular.module("chatApp").controller("ChatController",["$scope","$window","$sce","SocketService",function(o,e,s,n){"use strict";function t(e){var s;"/"==e.charAt(0)?(s=m(e),s&&o.messages.push(s)):(r(o.room,e),o.messages.push("Me: "+e)),o.inputMessage=""}function r(o,e){var s={room:o,text:e};n.emit("message",s)}function a(o){n.emit("join",{newRoom:o})}function m(o){var e=o.split(" ");o=e[0].substring(1,e[0].length).toLowerCase();var s=!1;switch(o){case"join":e.shift();var t=e.join(" ");a(t);break;case"nick":e.shift();var r=e.join(" ");n.emit("nameAttempt",r);break;default:s="Unrecognized command."}return s}o.messages=[],o.roomList=[],o.room="Lobby",o.inputMessage="",o.newRoom="",o.newRoomError=!1,n.on("nameResult",function(e){var s;s=e.success?"You are now known as "+e.name+".":e.message,o.messages.push(s)}),n.on("joinResult",function(e){o.room=e.room,o.messages=[],o.messages.push("You are now in the room "+e.room)}),n.on("message",function(e){o.messages.push(e.text)}),n.on("rooms",function(e){o.roomList=[];for(var s in e)s=s.substring(1,s.length),""!==s&&o.roomList.push(s)}),setInterval(function(){n.emit("rooms")},1e3),o.submit=function(o){t(o)},o.focusChatroom=function(e){m("/join "+e),o.messages=[],o.messages.push("Room changed.")},o.createNewChatroom=function(e){e?(t("/join "+e),$("#myModal").modal("hide"),o.newRoomError=!1):o.newRoomError=!0},o.sanitizeHtml=function(o){return s.trustAsHtml(o)}}]);
angular.module("chatApp").controller("ChatHistoryController",["$scope","$http","$location","ChatHistoryService",function(e,o,r,t){"use strict";function a(o){t.getChatRoomHistory(o).then(function(r,t,a,n){e.chatRoomName=o,e.chatLines=r.data},function(o,r,t,a){e.errorMessage="An error ocurred retrieving the history. Please reload de page."})}e.chatRoomName="Lobby",e.errorMessage="",t.getChatRooms().then(function(o,r,t,a){e.chatRooms=o.data},function(o,r,t,a){e.errorMessage="An error ocurred retrieving the history. Please reload de page."}),a("Lobby"),e.reloadHistory=function(e){return a(e)}}]);
angular.module("chatApp").controller("RegisterController",["$scope","$http","$location","UserService","AuthService",function(e,r,s,t,a){"use strict";e.user={email:"",username:"",password:""},e.errorMessage="",e.register=function(r){t.register(r).then(function(r,t,n,o){var u=a.parseToken(r.data.token);e.setCurrentUser(u.user._id,u.user.email,u.user.username),s.path("/chat")},function(r,s,t,a){e.errorMessage=r.data.message})}}]);
angular.module("chatApp").factory("AuthInterceptor",["$q","$injector",function(e,t){return{request:function(e){var n=t.get("AuthService"),r=n.getToken();return r&&(e.headers["x-access-token"]=r),e.headers["Content-Type"]="application/json; charset=UTF-8",e},response:function(e){var n=e.data.token,r=t.get("AuthService");return n&&r.saveToken(n),e}}}]);
angular.module("chatApp").factory("AuthService",["$http","$window","ApiBaseUrl",function(e,t,n){"use strict";var o={};return o.saveToken=function(e){t.localStorage.jwtToken=e},o.getToken=function(){return t.localStorage.jwtToken},o.login=function(t){return e.post(n+"/authenticate",t)},o.logout=function(){o.getToken()&&t.localStorage.removeItem("jwtToken")},o.isAuthed=function(){var e=o.getToken();if(e){var t=o.parseToken(e),n=Math.round((new Date).getTime()/1e3);return n<=t.exp}return!1},o.parseToken=function(e){var n=e.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))},o}]);
angular.module("chatApp").factory("ChatHistoryService",["$http","ApiBaseUrl",function(t,r){"use strict";var o={};return o.getChatRoomHistory=function(o){return t.get(r+"/history/"+o)},o.getChatRooms=function(){return t.get(r+"/chatroom")},o}]);
angular.module("chatApp").factory("SocketService",["$rootScope",function(n){"use strict";var t={},o=io.connect();return t.on=function(t,c){o.on(t,function(){var t=arguments;n.$apply(function(){c.apply(o,t)})})},t.emit=function(t,c,a){o.emit(t,c,function(){var t=arguments;n.$apply(function(){a&&a.apply(o,t)})})},t}]);
angular.module("chatApp").factory("UserService",["$http","ApiBaseUrl",function(r,e){"use strict";var t={};return t.register=function(t){return r.post(e+"/users",{user:t})},t}]);
//# sourceMappingURL=data:application/json;base64,