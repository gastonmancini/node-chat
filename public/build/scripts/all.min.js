!function(){"use strict";var t=angular.module("chatApp",["ngRoute","ngSanitize"]);t.constant("ApiBaseUrl","http://localhost:3000/api"),t.config(["$routeProvider","$locationProvider","$httpProvider",function(t,e,o){o.interceptors.push("AuthInterceptor"),t.when("/login",{templateUrl:"/views/login.html",controller:"AuthController",auth:!1}).when("/chat",{templateUrl:"/views/chat.html",controller:"ChatController",auth:!0}).when("/history",{templateUrl:"/views/chatHistory.html",controller:"ChatHistoryController",auth:!0}).when("/register",{templateUrl:"/views/register.html",controller:"RegisterController",auth:!1}).otherwise({redirectTo:"/login"})}]),t.run(["$route","$rootScope","$location","AuthService",function(t,e,o,r){e.$on("$locationChangeStart",function(e,l,n){var i=o.path(),h=t.routes[i];h&&h.auth&&!r.isAuthed()&&o.path("/login")})}])}();
angular.module("chatApp").controller("ApplicationController",["$scope","$window","$location","AuthService",function(e,t,r,n){"use strict";e.setCurrentUser=function(e,r,n){var o={_id:e,username:n,email:r};t.localStorage.setItem("currentUser",JSON.stringify(o))},e.getCurrentUser=function(){return JSON.parse(t.localStorage.getItem("currentUser"))},e.isAuthed=function(){return null!==n.isAuthed()&&n.isAuthed()!==!1},e.logout=function(){n.logout(),t.localStorage.removeItem("currentUser"),r.path("/login")}}]);
angular.module("chatApp").controller("AuthController",["$scope","$location","AuthService",function(e,r,t){"use strict";e.credentials={email:"",password:""},e.formregister={error:!1},e.authenticate=function(n){t.login(n).then(function(n){var o=t.parseToken(n.data.token);e.setCurrentUser(o.user._id,o.user.email,o.user.username),r.path("/chat")},function(){e.formregister.error=!0})}}]);
angular.module("chatApp").controller("ChatController",["$scope","$window","$sce","SocketService",function(o,e,s,n){"use strict";function t(e){var s;"/"==e.charAt(0)?(s=m(e),s&&o.messages.push(s)):(r(o.room,e),o.messages.push("Me: "+e)),o.inputMessage=""}function r(o,e){var s={room:o,text:e};n.emit("message",s)}function a(o){n.emit("join",{newRoom:o})}function m(o){var e=o.split(" ");o=e[0].substring(1,e[0].length).toLowerCase();var s=!1;switch(o){case"join":e.shift();var t=e.join(" ");a(t);break;case"nick":e.shift();var r=e.join(" ");n.emit("nameAttempt",r);break;default:s="Unrecognized command."}return s}o.messages=[],o.roomList=[],o.room="Lobby",o.inputMessage="",o.newRoom="",o.newRoomError=!1,n.on("nameResult",function(e){var s;s=e.success?"You are now known as "+e.name+".":e.message,o.messages.push(s)}),n.on("joinResult",function(e){o.room=e.room,o.messages=[],o.messages.push("You are now in the room "+e.room)}),n.on("message",function(e){o.messages.push(e.text)}),n.on("rooms",function(e){o.roomList=[];for(var s in e)s=s.substring(1,s.length),""!==s&&o.roomList.push(s)}),setInterval(function(){n.emit("rooms")},1e3),o.submit=function(o){t(o)},o.focusChatroom=function(e){m("/join "+e),o.messages=[],o.messages.push("Room changed.")},o.createNewChatroom=function(e){e?(t("/join "+e),$("#myModal").modal("hide"),o.newRoomError=!1):o.newRoomError=!0},o.sanitizeHtml=function(o){return s.trustAsHtml(o)}}]);
angular.module("chatApp").controller("ChatHistoryController",["$scope","$http","$location","ApiBaseUrl",function(o,t,c,s){"use strict";function e(c){t.get(s+"/history/"+c).success(function(t){o.chatRoomName=c,o.chatLines=t})}o.chatRoomName="Lobby",t.get(s+"/chatroom").success(function(t){o.chatRooms=t}),t.get(s+"/history/Lobby").success(function(t){o.chatRoomName="Lobby",o.chatLines=t}),o.reloadHistory=function(o){e(o)}}]);
angular.module("chatApp").controller("RegisterController",["$scope","$http","$location","ApiBaseUrl",function(r,e,o,s){"use strict";r.user={email:"",username:"",password:""},r.formregister={error:!1},r.register=function(t){e.post(s+"/users",{user:t}).success(function(){o.path("/")}).error(function(){r.formregister.error=!0})}}]);
angular.module("chatApp").factory("AuthInterceptor",["$q","$injector",function(e,t){return{request:function(e){var n=t.get("AuthService"),r=n.getToken();return r&&(e.headers["x-access-token"]=r),e.headers["Content-Type"]="application/json; charset=UTF-8",e},response:function(e){var n=e.data.token,r=t.get("AuthService");return n&&r.saveToken(n),e}}}]);
angular.module("chatApp").factory("AuthService",["$http","$window","ApiBaseUrl",function(e,t,n){"use strict";var o={};return o.saveToken=function(e){t.localStorage.jwtToken=e},o.getToken=function(){return t.localStorage.jwtToken},o.login=function(t){return e.post(n+"/authenticate",t)},o.logout=function(){o.getToken()&&t.localStorage.removeItem("jwtToken")},o.isAuthed=function(){var e=o.getToken();if(e){var t=o.parseToken(e),n=Math.round((new Date).getTime()/1e3);return n<=t.exp}return!1},o.parseToken=function(e){var n=e.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))},o}]);
angular.module("chatApp").factory("SocketService",["$rootScope",function(n){"use strict";var t={},o=io.connect();return t.on=function(t,c){o.on(t,function(){var t=arguments;n.$apply(function(){c.apply(o,t)})})},t.emit=function(t,c,a){o.emit(t,c,function(){var t=arguments;n.$apply(function(){a&&a.apply(o,t)})})},t}]);
//# sourceMappingURL=data:application/json;base64,