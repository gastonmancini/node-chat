!function(){"use strict";var t=angular.module("chatApp",["ngRoute","ngSanitize"]);t.constant("ApiBaseUrl","http://localhost:3000/api"),t.config(["$routeProvider","$locationProvider","$httpProvider",function(t,e,o){o.interceptors.push("AuthInterceptor"),t.when("/login",{templateUrl:"/views/login.html",controller:"AuthController",auth:!1}).when("/chat",{templateUrl:"/views/chat.html",controller:"ChatController",auth:!0}).when("/history",{templateUrl:"/views/chatHistory.html",controller:"ChatHistoryController",auth:!0}).when("/register",{templateUrl:"/views/register.html",controller:"RegisterController",auth:!1}).otherwise({redirectTo:"/login"})}]),t.run(["$location","$rootScope","AuthService",function(t,e,o){e.$on("$locationChangeStart",function(e,r,l){var n=r.auth;n&&!o.isAuthed&&t.path("/login")})}])}();
angular.module("chatApp").controller("ApplicationController",["$scope","$location","AuthService",function(o,t,l){"use strict";o.logout=function(){l.logout(),t.path("/login")}}]);
angular.module("chatApp").controller("AuthController",["$scope","$location","AuthService",function(o,r,e){"use strict";o.credentials={email:"",password:""},o.formregister={error:!1},o.authenticate=function(t){e.login(t).then(function(){console.log("Login success."),r.path("/chat")},function(){console.log("Login error."),o.formregister.error=!0})}}]);
angular.module("chatApp").controller("ChatController",["$scope","$window","$sce","SocketService",function(o,e,s,n){"use strict";function t(e){var s;"/"==e.charAt(0)?(s=m(e),s&&o.messages.push(s)):(r(o.room,e),o.messages.push("Me: "+e)),o.inputMessage=""}function r(o,e){var s={room:o,text:e};n.emit("message",s)}function a(o){n.emit("join",{newRoom:o})}function m(o){var e=o.split(" ");o=e[0].substring(1,e[0].length).toLowerCase();var s=!1;switch(o){case"join":e.shift();var t=e.join(" ");a(t);break;case"nick":e.shift();var r=e.join(" ");n.emit("nameAttempt",r);break;default:s="Unrecognized command."}return s}o.messages=[],o.roomList=[],o.room="Lobby",o.inputMessage="",o.newRoom="",o.newRoomError=!1,n.on("nameResult",function(e){var s;s=e.success?"You are now known as "+e.name+".":e.message,o.messages.push(s)}),n.on("joinResult",function(e){o.room=e.room,o.messages=[],o.messages.push("You are now in the room "+e.room)}),n.on("message",function(e){o.messages.push(e.text)}),n.on("rooms",function(e){o.roomList=[];for(var s in e)s=s.substring(1,s.length),""!==s&&o.roomList.push(s)}),setInterval(function(){n.emit("rooms")},1e3),o.submit=function(o){t(o)},o.focusChatroom=function(e){m("/join "+e),o.messages=[],o.messages.push("Room changed.")},o.createNewChatroom=function(e){e?(t("/join "+e),$("#myModal").modal("hide"),o.newRoomError=!1):o.newRoomError=!0},o.sanitizeHtml=function(o){return s.trustAsHtml(o)}}]);
angular.module("chatApp").controller("ChatHistoryController",["$scope","$http","$location","ApiBaseUrl",function(o,t,c,s){"use strict";function n(c){t.get(s+"/history/"+c).success(function(t){o.chatRoomName=c,o.chatLines=t})}o.chatRoomName="Lobby",t.get(s+"/chatroom").success(function(t){o.chatRooms=t}),t.get(s+"/history/Lobby").success(function(o){n("Lobby")}),o.reloadHistory=function(o){n(o)}}]);
angular.module("chatApp").controller("RegisterController",["$scope","$http","$location","ApiBaseUrl",function(r,e,o,s){"use strict";r.user={email:"",username:"",password:""},r.formregister={error:!1},r.register=function(t){e.post(s+"/users",{user:t}).success(function(){o.path("/")}).error(function(){r.formregister.error=!0})}}]);
angular.module("chatApp").factory("AuthInterceptor",["$q","$injector",function(e,t){return{request:function(e){var n=t.get("AuthService"),r=n.getToken();return r&&(e.headers["x-access-token"]=r),e.headers["Content-Type"]="application/json; charset=UTF-8",e},response:function(e){var n=e.data.token,r=t.get("AuthService");return n&&r.saveToken(n),console.log(n),e}}}]);
angular.module("chatApp").factory("AuthService",["$http","$window","ApiBaseUrl",function(t,e,n){"use strict";function o(t){var n=t.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(e.atob(o))}var r={};return r.saveToken=function(t){e.localStorage.jwtToken=JSON.stringify(t)},r.getToken=function(){return e.localStorage.jwtToken},r.login=function(e){return t.post(n+"/authenticate",e)},r.logout=function(){this.getToken()&&this.saveToken(null)},r.isAuthed=function(){var t=this.getToken();if(console.log(t),t){var e=o(t);return Math.round((new Date).getTime()/1e3)<=e.exp}return!1},r}]);
angular.module("chatApp").factory("SocketService",["$rootScope",function(n){"use strict";var t={},o=io.connect();return t.on=function(t,c){o.on(t,function(){var t=arguments;n.$apply(function(){c.apply(o,t)})})},t.emit=function(t,c,a){o.emit(t,c,function(){var t=arguments;n.$apply(function(){a&&a.apply(o,t)})})},t}]);
//# sourceMappingURL=data:application/json;base64,